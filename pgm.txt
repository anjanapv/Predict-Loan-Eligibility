#--------------------------------------------------#--------------------------------------------------
from pyspark.sql.functions import col,sum,avg,max,min,when,trim
from sklearn.linear_model import LogisticRegression
from pyspark.sql.functions import lit
from sklearn import metrics
#from pyspark.sql.types import *
#from sklearn.model_selection import train_test_split

df1=spark.read.option("header",True).option("inferSchema",True).csv("C:/Users/anjan/Documents/Big data/hackerthon/loan prediction/train_ctrUa4K.csv")

#df1.show(100)
#df1.count()
#df1.printSchema()
#cleansedDf1 = df1.na.drop()
#cleansedDf1.count()
#df1.select("Loan_ID").distinct().count()
#df1.select("Loan_ID").distinct().show(100,False)

#df1.where("Loan_ID is null").count()
#df1.where("Gender is null").count()
#df1.where("Married is null").count()
#df1.where("Dependents is null").count()
#df1.where("Education is null").count()
#df1.where("Self_Employed is null").count()
#df1.where("ApplicantIncome is null").count()
#df1.where("CoapplicantIncome is null").count()
#df1.where("LoanAmount is null").count()
#df1.where("Loan_Amount_Term is null").count()
#df1.where("Credit_History is null").count()
#df1.where("Property_Area is null").count()
#df1.where("Loan_Status is null").count()


#df2=df1.select("Loan_ID","Education","ApplicantIncome","CoapplicantIncome","Property_Area","Loan_Status")
df2=df1.select("Education","ApplicantIncome","CoapplicantIncome","Property_Area","Loan_Status")
#df2.show()
#df2.count()
#df2.na.drop().count()
#df2.describe().show()

#df1.select("ApplicantIncome").distinct().count()
#df1.select("CoapplicantIncome").distinct().count()
#df2.count()

df1.select("ApplicantIncome").withColumn("ApplicantIncomePartition", \
when((col("ApplicantIncome")>=0) & (col("ApplicantIncome")<5000),lit(0)) \
.when((col("ApplicantIncome")>=5000) & (col("ApplicantIncome")<10000),lit(1)) \
.when((col("ApplicantIncome")>=10000) & (col("ApplicantIncome")<15000),lit(2)) \
.when((col("ApplicantIncome")>=15000) & (col("ApplicantIncome")<20000),lit(3)) \
.when((col("ApplicantIncome")>=20000) & (col("ApplicantIncome")<25000),lit(4)) \
.when((col("ApplicantIncome")>=25000) & (col("ApplicantIncome")<30000),lit(5)) \
.when((col("ApplicantIncome")>=30000) & (col("ApplicantIncome")<35000),lit(6)) \
.when((col("ApplicantIncome")>=35000) & (col("ApplicantIncome")<40000),lit(7)) \
.when((col("ApplicantIncome")>=40000) & (col("ApplicantIncome")<45000),lit(8)) \
.when((col("ApplicantIncome")>=45000) & (col("ApplicantIncome")<50000),lit(9)) \
.when((col("ApplicantIncome")>=50000) & (col("ApplicantIncome")<55000),lit(10)) \
.when((col("ApplicantIncome")>=55000) & (col("ApplicantIncome")<60000),lit(11)) \
.when((col("ApplicantIncome")>=60000) & (col("ApplicantIncome")<65000),lit(12)) \
.when((col("ApplicantIncome")>=65000) & (col("ApplicantIncome")<70000),lit(13)) \
.when((col("ApplicantIncome")>=70000) & (col("ApplicantIncome")<75000),lit(14)) \
.when((col("ApplicantIncome")>=75000) & (col("ApplicantIncome")<80000),lit(15)) \
.when((col("ApplicantIncome")>=80000) & (col("ApplicantIncome")<85000),lit(16))).drop("ApplicantIncome").groupBy("ApplicantIncomePartition").count().show()

#--------------------------------------------------#--------------------------------------------------
+-------+------------+-----------------+------------------+-------------+-----------+
|summary|   Education|  ApplicantIncome| CoapplicantIncome|Property_Area|Loan_Status|
+-------+------------+-----------------+------------------+-------------+-----------+
|  count|         614|              614|               614|          614|        614|
|   mean|        null|5403.459283387622| 1621.245798027101|         null|       null|
| stddev|        null|6109.041673387181|2926.2483692241894|         null|       null|
|    min|    Graduate|              150|               0.0|        Rural|          N|
|    max|Not Graduate|            81000|           41667.0|        Urban|          Y|
+-------+------------+-----------------+------------------+-------------+-----------+

df2.select("Loan_ID").distinct().show()
df2.select("Education").distinct().show()
df2.select("ApplicantIncome").distinct().show()
df2.select("CoapplicantIncome").distinct().show()
df2.select("Property_Area").distinct().show()
df2.select("Loan_Status").distinct().show()

df3 = df2.select("Education","Property_Area","Loan_Status")

df3.select("Education").distinct().show()
df3.select("Property_Area").distinct().show()
df3.select("Loan_Status").distinct().show()


>>> df3.select("Education").distinct().show()
+------------+
|   Education|
+------------+
|Not Graduate|
|    Graduate|
+------------+

>>> df3.select("Property_Area").distinct().show()
+-------------+
|Property_Area|
+-------------+
|        Urban|
|    Semiurban|
|        Rural|
+-------------+

>>> df3.select("Loan_Status").distinct().show()
+-----------+
|Loan_Status|
+-----------+
|          Y|
|          N|
+-----------+

df4 = df3.withColumn("Education", when(col("Education")=="Not Graduate",0).when(col("Education")=="Graduate",1)) \
.withColumn("Property_Area", when(col("Property_Area")=="Urban",0).when(col("Property_Area")=="Semiurban",1).when(col("Property_Area")=="Rural",2)) \
.withColumn("Loan_Status", when(col("Loan_Status")=="Y",0).when(col("Loan_Status")=="N",1))

df_x=df4.select("Education","Property_Area").toPandas()
df_y=df4.select("Loan_Status").toPandas()

print('Result is =',reg.predict([[1,0]]))

reg = LogisticRegression()
reg.fit(df_x, df_y)
y_pred = reg.predict(x_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))


Loan_ID : 0
Gender : 13
Married : 3
Dependents : 15
Education : 0
Self_Employed : 32
ApplicantIncome : 0
CoapplicantIncome : 0
LoanAmount : 22
Loan_Amount_Term : 14
Credit_History : 50
Property_Area : 0
Loan_Status : 0

root
 |-- Loan_ID: string (nullable = true)
 |-- Gender: string (nullable = true)
 |-- Married: string (nullable = true)
 |-- Dependents: string (nullable = true)
 |-- Education: string (nullable = true)
 |-- Self_Employed: string (nullable = true)
 |-- ApplicantIncome: string (nullable = true)
 |-- CoapplicantIncome: string (nullable = true)
 |-- LoanAmount: string (nullable = true)
 |-- Loan_Amount_Term: string (nullable = true)
 |-- Credit_History: string (nullable = true)
 |-- Property_Area: string (nullable = true)
 |-- Loan_Status: string (nullable = true)